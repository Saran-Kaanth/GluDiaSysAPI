//serializers
from rest_framework import serializers
from .models import CustomUser
from django.contrib.auth import get_user_model


class RegisterSerializer(serializers.ModelSerializer):
    password=serializers.CharField(min_length=8,max_length=68,write_only=True)

    class Meta:
        model=get_user_model()
        fields=['email','username','password','mobile']
    
    def validate(self, attrs):
        email=attrs.get('email','')
        username=attrs.get('username','')

        print("validation")
        if not username.isalnum():
            print("error")
            print(serializers.ValidationError)
            return serializers.ValidationError("Username must contain alphabets and numbers")
        return attrs

    def create(self, validated_data):
        return CustomUser.objects.create_user(**validated_data)


//settings
"""
Django settings for GluDiaSysAPI project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r^xzte8d7ix%x(&lwlv^%%^nce*76bi#yv&46v^(^(%lsl585r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'AuthenticationAPI',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GluDiaSysAPI.urls'

AUTH_USER_MODEL="AuthenticationAPI.CustomUser"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GluDiaSysAPI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

REST_FRAMEWORK={
    "NON_FIELD_ERRORS_KEY":"error",
    "DEFAULT_AUTHENTICATION_CLASSES":(
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_USE_TLS=True
EMAIL_HOST="smtp.gmail.com"
EMAIL_PORT=587
EMAIL_HOST_USER=os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=os.environ.get('EMAIL_HOST_PASSWORD')


//manager
from lib2to3.pytree import Base
from django.contrib.auth.models import BaseUserManager


class CustomUserManager(BaseUserManager):

    def create_user(self,email,username,password=None,mobile=None):
        print("Manager")
        if username is None:
            raise TypeError("Username must be set")
        if email is None:
            raise TypeError("Email must be set")

        user=self.model(username=username,email=self.normalize_email(email),mobile=mobile)
        user.set_password(password)
        user.save()
        return user
    
    def create_superuser(self,email,username,password=None,mobile=None):
        if username is None:
            raise TypeError("Username must be set")
        if email is None:
            raise TypeError("Email must be set")
        if password is None:
            raise TypeError("Password must not be none")

       
        user=self.create_user(email,username,password,mobile)
        user.is_superuser=True
        user.is_staff=True
        user.save()
        return user


//views
from django.shortcuts import render
from .serializers import *
from rest_framework import generics,status
from rest_framework.response import Response
from .models import *
from rest_framework_simplejwt.tokens import RefreshToken

# Create your views here.


class RegisterAPIView(generics.CreateAPIView):
    serializer_class=RegisterSerializer

    def post(self,request):
        print(request.data)
        serializer=self.serializer_class(data=request.data)
        # user_value=CustomUser.objects.check(email=request.data["email"])
        # print(user_value)
        if serializer.is_valid():
            serializer.save()
            user_data=serializer.data
            user=CustomUser.objects.get(email=user_data["email"])
            token=RefreshToken.for_user(user=user)
            token_2=token.access_token
            print(token)
            print(token_2)
            print(user_data)
            return Response(user_data,status=status.HTTP_201_CREATED)
        return Response({"message":"Check the Provided credentials","error":serializer.errors},status=status.HTTP_400_BAD_REQUEST)
        # return Response({"message":"Email already exists"},status=status.HTTP_400_BAD_REQUEST)


//urls
from django.urls import URLPattern, path
from .views import *

urlpatterns=[
    path('register/',RegisterAPIView.as_view(),name="register"),
]

    
